;		прошивка через USBASP : avrdude -p t13 -c usbasp -P usb -U flash:w:FILE_NAME.hex
;   прошивка через arduinoUNO(nano)  : avrdude -p t13  -c avrisp -b 19200 -P /dev/ttyUSB0  -U flash:w:FILE_NAME.hex

;     =================   РАБОТА С РЕЖИМОМ СНА  ========================
;   К пинам 3 и 4 контроллера через резисторы присоединены светодиоды. По прерываниям таймера 
;  светодиоды моргают. После цикла из нескольких смен состояния диодов вызывается разрешение
;  на ввод в режим сна и запускается таймер ватчдога. При пробуждении от прерывания ватчдого 
;  запускается сброс контроллера  и цикл повторяется.

;  ВАЖНО: при настройке ватчдога обязательно разрешить прерывания от WD таймера. Иначе 
;                 вместо перезагрузки при пробуждении получим на выходе мусор.


;   includes
; подставить свой путь для подгрузки INC файлов 
.includepath "/home/user/proj/avr/avra/" 
.include "tn13def.inc"            ; загрузка предопределений для ATiny13
.list                          			   ; включить генерацию листинга
;

; data segment  
; --------------------------------------------------
.dseg 


;code segment
; --------------------------------------------------
.cseg
;  -----  interrupts vectors  -----------
;
; by default - RESET
rjmp RESET ; Reset Handler
rjmp RESET ; EXT_INT0 ; IRQ0 Handler
rjmp RESET ; PCINT0 ; PCINT0 Handler
rjmp TIM0_OVF ; Timer0 Overflow Handler
rjmp RESET ; EE_RDY ; EEPROM Ready Handler
rjmp RESET ; ANA_COMP ; Analog Comparator Handler
rjmp RESET ; TIM0_COMPA ; Timer0 CompareA Handler
rjmp RESET ; TIM0_COMPB ; Timer0 CompareB Handler
rjmp RESET ; WATCHDOG ; Watchdog Interrupt Handler
rjmp RESET ; ADC ; ADC Conversion Handler

RESET:
; -- инициализация стека --
; старший байт ATtiny13 не нужен(адреса SRAM вмещаются в 1 байт)
ldi r16, Low(RAMEND)  ; младший байт конечного адреса ОЗУ в R16
out SPL, r16          ; установка младшего байта указателя стека

; ---  настройка
cli
;  РЕГИСТРЫ
; счётчики таймера для задержек
clr r0
clr r1
.def counter0=r0
.def counter1=r1
.equ maxCounter1=2
ldi r16,maxCounter1
mov counter1,r16
; счётчик циклов мигалки
clr r2
.def flipCounter=r2
.equ maxFlipCount=32
ldi r16,maxFlipCount
mov flipCounter,r16

; для инверсии состояния светодиода
clr r3
.def invert=r3
ldi r16,0b00011000
mov invert, r16

; регистр флагов
.def flags=r25
clr flags
.equ flip_flag=1
.equ flip_flag_bit=0

; Пины
;светодиоды подключать через сопротивления
ldi r16,(1<<DDB3) | (1<<DDB4) ; пины 3 и 4 на вывод
out DDRB,r16
ldi r16,(1<<PORTB3)					 ;на пине 3 логическая единица
out PORTB,r16


; Таймер 0
; разрешить прерывания по таймеру
ldi r16,0
out TIMSK0,r16
out TCCR0B,r16
ldi r16, (1<<TOIE0)
out TIMSK0,	r16
; предделитель таймера 1/8
ldi r16, (1<<CS01) 
out TCCR0B, r16



sei
; настройка окончена

MAIN:
	sbrc flags, flip_flag_bit
	; если установлен флаг смены состояния 
	; меняем состояние светодиодов
	rcall FLIP
	; здесь можно делать что-то полезное
rjmp MAIN

; --------------------------------------------------------------------------------------------------------------------------
;  ----------------------------------------------- ПРЕРЫВАНИЯ  -----------------------------------------------------
; --------------------------------------------------------------------------------------------------------------------------

; прерывания таймера 0 по переполнению
TIM0_OVF:
	in r16,SREG
	push r16
	dec counter0 ; уменьшили значение счётчика0 на 1
	brne END_TIM0 ; если не 0 вышли из таймера
	dec counter1  ; уменьшили значение счётчика1 на 1
	brne END_TIM0 ; если не 0 вышли из таймера
	ldi r16,maxCounter1
	mov counter1,r16 ; взвели счётчик1
	sbr flags,flip_flag ; установили флаг инвертирования состояния светодиодов
END_TIM0:
	pop r16
	out SREG,r16
reti

; -------------------------------------------------------------------------------------------------------------------------------
; -------------------------------------------- вспомогательный код --------------------------------------------------
; -------------------------------------------------------------------------------------------------------------------------------

; мигание светодиодов Запуск режима сна
FLIP:
	cbr flags, flip_flag ; сброс флага смены состояния
	in r16,PORTB; прочитали состояние
	eor r16,invert ; инвертировали его
	out PORTB,r16 ; записали обратно в порт
	; далее работает счётчик циклов таймера
	dec flipCounter 
	brne END_FLIP 
	; счётчик обнулился - запуск режима сна
	rjmp SET_SLEEP
END_FLIP:	
ret

; настройка и запуск таймера ватчдога для выхода из режима сна
SET_WDT:	
	wdr 
	; WDTCR - таймер ватчдога
	in r16, WDTCR
	; разрешени е на модификацию и режим сброса
	; вводится для исключения случайностей( см. даташит)
	ori r16, (1<<WDCE) | (1<<WDE) 
	out WDTCR, r16
	; установка времени задержки и старт WD в режиме разрешения прерываний и сброса
	ldi r16,(1<<WDTIE) | (1<<WDE) | (1<<WDP3) | (1<<WDP0) 
	out WDTCR,r16
ret

; ввод контроллера в режим сна	
SET_SLEEP:
	cli
	; разрешение на глубокий сон (работает только WD и внешние прерывания)
	ldi r16, (1<<SE) | ( 1<<SM1) | (0<<SM0)
	out MCUCR,r16
	rcall SET_WDT
	; режим сна не влияет на режим портов. Их надо отключать самим
	; сброс портов в 0 для снижения энергопотребления
	ldi r16,0
	out PORTB, r16
	sei
	; запустить спящий режим
	sleep
	




;  EEPROM segment
; ----------------------------------
.eseg     ; 










